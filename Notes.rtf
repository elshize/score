{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Italic;\f5\fmodern\fcharset0 Courier;
\f6\fnil\fcharset0 Monaco;\f7\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red9\green80\blue208;\red36\green38\blue41;
\red37\green127\blue159;\red13\green0\blue129;\red43\green39\blue19;\red235\green236\blue237;\red161\green33\blue108;
\red240\green0\blue31;\red0\green72\blue255;\red104\green0\blue254;\red140\green83\blue65;\red0\green0\blue0;
\red33\green118\blue199;\red242\green242\blue242;\red60\green60\blue59;\red9\green76\blue116;\red95\green124\blue3;
\red240\green240\blue240;\red60\green60\blue59;\red218\green117\blue7;\red43\green54\blue61;\red39\green159\blue64;
\red230\green87\blue68;\red39\green159\blue64;\red117\green66\blue151;\red130\green130\blue130;\red203\green0\blue77;
\red9\green76\blue116;\red117\green66\blue151;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c0\c41176\c85098;\cssrgb\c18824\c20000\c21176;
\cssrgb\c16863\c56863\c68627;\cssrgb\c6275\c6275\c58039;\cssrgb\c22353\c20000\c9412;\cssrgb\c93725\c94118\c94510;\csgenericrgb\c63137\c12941\c42353;
\csgenericrgb\c94118\c0\c12157;\csgenericrgb\c0\c28235\c100000;\csgenericrgb\c40784\c0\c99608;\csgenericrgb\c54902\c32549\c25490;\csgray\c0;
\cssrgb\c14902\c54510\c82353;\cssrgb\c96078\c96078\c96078;\cssrgb\c30196\c30196\c29804;\cssrgb\c0\c37255\c52941;\cssrgb\c44314\c54902\c0;
\cssrgb\c95294\c95294\c95294;\cssrgb\c30196\c30196\c29804;\cssrgb\c89020\c53333\c0;\cssrgb\c22353\c27451\c30588;\cssrgb\c16471\c67059\c31765;
\cssrgb\c92941\c43137\c33333;\cssrgb\c16471\c67059\c31765;\cssrgb\c53725\c34902\c65882;\cssrgb\c58039\c58039\c58039;\cssrgb\c84314\c0\c37255;
\cssrgb\c0\c37255\c52941;\cssrgb\c53725\c34902\c65882;\cssrgb\c0\c0\c0;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf2 publishing a new version\
	try clippy (requires nightly for now)\
	make sure tests work\
	make sure examples work\
	change the version number \
		dependencies auto-update if the first non-zero number doesn\'92t change\
	update categories (after slug pull request)\
	
\f1\fs34 \cf0 \CocoaLigature0 git tag version-0.X.0
\f0\fs48 \cf2 \CocoaLigature1 \
	cargo package\
		optional, allows you to inspect the target/package/*.crate file\
	cargo publish\
\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-api-guidelines"}}{\fldrslt \cf2 https://github.com/brson/rust-api-guidelines}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://deterministic.space/elegant-apis-in-rust.html"}}{\fldrslt \cf2 https://deterministic.space/elegant-apis-in-rust.html}}\
https://pascalhertleif.de/artikel/good-practices-for-writing-rust-libraries/\
  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-lang.github.io/book/second-edition/index.html"}}{\fldrslt \cf2 https://rust-lang.github.io/book/second-edition/index.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://doc.rust-lang.org/stable/nomicon/README.html"}}{\fldrslt \cf2 https://doc.rust-lang.org/stable/nomicon/README.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/"}}{\fldrslt \cf2 https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/rust-unofficial/patterns"}}{\fldrslt \cf2 https://github.com/rust-unofficial/patterns}}\
 {\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-cookbook"}}{\fldrslt 
\fs36 \cf3 \expnd0\expndtw0\kerning0
\ul \ulc3 https://github.com/brson/rust-cookbook}}
\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
{\field{\*\fldinst{HYPERLINK "https://thesquareplanet.com/blog/rust-tips-and-tricks/"}}{\fldrslt https://thesquareplanet.com/blog/rust-tips-and-tricks/}}\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://danielkeep.github.io/itercheat_baked.html"}}{\fldrslt 
\fs48 \cf0 https://danielkeep.github.io/itercheat_baked.html}}\
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 \kerning1\expnd0\expndtw0 \
rouille	really simple, active\
rustful	fairly light weight, built on top of hyper\
		lot of docs, active\
iron	pretty heavy weight\
		very active\
		{\field{\*\fldinst{HYPERLINK "https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron"}}{\fldrslt https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron}}\
nickel	fairly light weight, built on top of hyper\
		lot of examples, iffy docs, inactive\
pencil	very light weight, built on top of hyper\
		inactive\
		\
		\
curl http://127.0.0.1:9000/log/all\
\
curl -X PUT http://127.0.0.1:9000/set/time/10\
\
\
\pard\pardeftab720\sl300\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
#[derive(\cf5 PartialEq\cf4 )]\
\cf6 enum\cf4  \cf5 MyEnum\cf4  \{ ... \}\cf7 \cb8 \

\f0\fs48 \cf2 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 (cmd(\cf9 "follow log [level]"\cf0 ),              get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow log <path> [level]"\cf0 ),       get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow map"\cf0 ),                      get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow state"\cf0 ),                    get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow state <path>"\cf0 ),             get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
\
(cmd(\cf9 \'93get components\'93\cf0 ),                  get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 \'93get components <path>\'93\cf0 ),           get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 \'93get map\'94\cf0 ),                         get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
\
(cmd(\cf9 "run"\cf0 ),                             get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run log [level]"\cf0 ),                 get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run log <path> [level]"\cf0 ),          get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run map"\cf0 ),                         get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run state"\cf0 ),                       get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run state <path>"\cf0 ),                get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f2\i\b \cf10 /// Helper for components that want to maintain an (x, y) position. This will handle the
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// following events:
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// * "set-location" - Sets the data using an (f64, f64) event payload.
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// * "offset-location" - Add values to the data using an (f64, f64) event payload.
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// Note that this will panic if sent an event not listed above.
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 ///
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// If origin is missing GUIs should assume zero, if size is missing GUIs should assume
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// 1.0, if units are missing then GUIs should assume meters.
\f1\i0\b0 \cf0 \

\f3\b \cf11 pub
\f1\b0 \cf0  
\f3\b \cf11 fn
\f1\b0 \cf0  
\f3\b handle_location_event
\f1\b0 (
\f4\i \cf11 id
\f1\i0 \cf0 : ComponentID, 
\f4\i \cf11 state
\f1\i0 \cf0 : &SimState, 
\f4\i \cf11 event
\f1\i0 \cf0 : &Event, 
\f4\i \cf11 effector
\f1\i0 \cf0 : &
\f3\b \cf11 mut
\f1\b0 \cf0  Effector)\
\{\
	
\f3\b \cf11 let
\f1\b0 \cf0  cname = &(*state.components).get(id).name;\
	
\f3\b \cf11 let
\f1\b0 \cf0  ename = &event.name;\
	
\f3\b \cf11 if
\f1\b0 \cf0  ename == \cf9 "set-location"\cf0  \{\
		
\f3\b \cf11 let
\f1\b0 \cf0  loc = event.expect_payload::<(\cf11 f64\cf0 , \cf11 f64\cf0 )>(&\cf12 format!\cf0 (\cf9 "component \{\} set-location should have an (f64, f64) payload"\cf0 , cname));\
		log_info!(effector, \cf9 "setting location to \{:.1\}, \{:.1\}"\cf0 , loc\cf13 .0\cf0 , loc\cf13 .1\cf0 );\
		effector.set_float(\cf9 "display-location-x"\cf0 , loc\cf13 .0\cf0 );\
		effector.set_float(\cf9 "display-location-y"\cf0 , loc\cf13 .1\cf0 );\
		\
	\} 
\f3\b \cf11 else
\f1\b0 \cf0  
\f3\b \cf11 if
\f1\b0 \cf0  ename == \cf9 "offset-location"\cf0  \{\
		
\f3\b \cf11 let
\f1\b0 \cf0  path = state.components.path(id);\
		
\f3\b \cf11 let
\f1\b0 \cf0  x = state.store.get_float(&(path.clone() + \cf9 ".display-location-x"\cf0 ));\
		
\f3\b \cf11 let
\f1\b0 \cf0  y = state.store.get_float(&(path + \cf9 ".display-location-y"\cf0 ));\
\
		
\f3\b \cf11 let
\f1\b0 \cf0  loc = event.expect_payload::<(\cf11 f64\cf0 , \cf11 f64\cf0 )>(&\cf12 format!\cf0 (\cf9 "component \{\} offset-location should have an (f64, f64) payload"\cf0 , cname));\
		log_info!(effector, \cf9 "setting location to \{:.1\}, \{:.1\}"\cf0 , x+loc\cf13 .0\cf0 , y+loc\cf13 .1\cf0 );\
		effector.set_float(\cf9 "display-location-x"\cf0 , x+loc\cf13 .0\cf0 );\
		effector.set_float(\cf9 "display-location-y"\cf0 , y+loc\cf13 .1\cf0 );\
		\
	\} 
\f3\b \cf11 else
\f1\b0 \cf0  \{\
		\cf12 panic!\cf0 (\cf9 "handle_location_event doesn't know how to handle \{\}"\cf0 , ename);\
	\}\
\}\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://es6-features.org/#Constants"}}{\fldrslt 
\fs36 \cf14 \CocoaLigature0 http://es6-features.org/#Constants}}
\fs36 \cf14 \CocoaLigature0 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \CocoaLigature1 \
\pard\pardeftab720\sl320\partightenfactor0

\f5\fs28 \cf15 \cb16 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 \
\pard\pardeftab720\sl540\partightenfactor0

\f1\fs36 \cf17 \cb1 \strokec17 world\
	cowardly-0: energy = 100\
	aggressive-1: energy = 150, chasing cowardly-0\
	\
	\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0effector.\cf18 \strokec18 set_float\cf17 \strokec17 (\cf19 \strokec19 "display-size-x"\cf17 \strokec17 , local.width);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0effector.\cf18 \strokec18 set_float\cf17 \strokec17 (\cf19 \strokec19 "display-\cb20 size-y"\cf17 \strokec17 , local.height);\cb1 \
display-location-x and y\
display-color\
display-name		or icon\
display-details\
	\
114 and 66\
\pard\pardeftab720\sl540\partightenfactor0
\cf21 \outl0\strokewidth0 9.4		\cf17 \outl0\strokewidth0 \strokec17 7/31	checking\
3.8		paypal\
\
\
\pard\pardeftab720\sl434\partightenfactor0

\f6\fs42 \cf22 \strokec22 var\cf23 \strokec23  text = draw.text(\cf24 \strokec24 'I know that eggs do well to stay out of frying pans.'\cf23 \strokec23 )\
text.move(\cf25 \strokec25 20\cf23 \strokec23 , \cf25 \strokec25 20\cf23 \strokec23 ).font(\{ fill: \cf24 \strokec24 color\cf23 \strokec23 , size: \cf24 \strokec24 \'91300%\'92\cf23 \strokec23  \})\
\
\pard\pardeftab720\sl434\partightenfactor0

\fs52 \cf23 \
\pard\pardeftab720\sl380\partightenfactor0

\fs38 \cf22 \strokec22 var\cf17 \strokec17  text = draw.text(\cf22 \strokec22 function\cf17 \strokec17 (\cf25 \strokec25 add\cf17 \strokec17 ) \{\
	add.move(x, y)\
  add.tspan(\cf24 \strokec24 name\cf17 \strokec17 )\cf21 \outl0\strokewidth0 .fill(\cf26 color\cf21 ).size(\cf26 \'91300%\'92\cf21 )\cf17 \outl0\strokewidth0 \strokec17 .newLine()\
  add.tspan(\cf24 \strokec24 details\cf17 \strokec17 ).fill(\cf24 \strokec24 \'91black\'92\cf17 \strokec17 )\cf21 \outl0\strokewidth0 .size(\cf26 \'91100%\'92\cf21 )\cf17 \outl0\strokewidth0 \strokec17 \
\})\
\
\
\
\pard\pardeftab720\sl540\partightenfactor0

\f1\fs36 \cf27 \strokec27 SDEBUG\cf17 \strokec17 .\cf27 \strokec27 get_current_state\cf17 \strokec17  = \cf27 \strokec27 get_current_log\cf17 \strokec17 ;\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf28 \strokec28 // () => promise\cf17 \strokec17 \
\cf27 \strokec27 SDEBUG\cf17 \strokec17 .\cf27 \strokec27 current_state_has_changed\cf17 \strokec17  = \cf27 \strokec27 log_has_changed\cf17 \strokec17 ;\'a0\cf28 \strokec28 // (current_state) => bool\cf17 \strokec17 \
\cf27 \strokec27 SDEBUG\cf17 \strokec17 .\cf27 \strokec27 apply_current_state\cf17 \strokec17  = \cf27 \strokec27 apply_log\cf17 \strokec17 ;\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf28 \strokec28 // (current_\cb20 state) => void\cf17 \cb1 \strokec17 \
\cf27 \strokec27 SDE\cb20 BUG\cf17 \strokec17 .\cf27 \strokec27 old_state\cf17 \strokec17  = \{\};\cb1 \
\
\pard\pardeftab720\sl320\partightenfactor0
\cf17 \
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 * Update geico credit card\
* Update paypal credit card\
* Support map:\
	- render display-name, add a comment for icons \
		font-size: 300%\
	- implement run-until-map-changed\
		` for now just run until display-state changes\
	- use display-location and display-size\
		paw, apple, twitter\
		origin is upper left\
	- can display drop shadows using filters\
	- title element can be used to display hover text\
		` could say who the bot is chasing\
	- use icons\
		` or support some std shapes like polygon with optional fill and stroke width\
		` paths support curves\
		` maybe just have the components add xml (importing)\
		` svg.js does support images\
		` could have a fall-back display shape (simple boxes, circles, path to icon)\
	- add names (use display-short-name if available)\
	- maybe a checkbox to use display-description (or a hover popup?)\
	- insread of run-until endpoints just have /run/time-slice and have sdebug\
	  figure out when to stop\
	- click should open a new window\
* Should have a comment somewhere describing display state options\
* Support components tab:\
	- indented list of links\
	- append text (maybe italic) using display-description\
	- open up a new page when clicking on a link\
* Support simulator page\
	- support help (maybe as some sort of drop down)\
		` although a new page would make it easier to compare\
	- maybe we can open a browser window when the sim starts?\
		` probably rather OS specific\
* Need support for component pages\
	- probably want /log/\{path\}/after/\{from-time\}\
\pard\pardeftab720\sl540\partightenfactor0

\f1\fs36 \cf21 \expnd0\expndtw0\kerning0
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 if\cf21  \cf29 let\cf21  Ok(path) = glob::Pattern::\cf30 new\cf21 (&path) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 if\cf21  \cf29 let\cf21  Some(level) = LogLevel::\cf30 with_str\cf21 (&level) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf30 handle_endpoint\cf21 (RestCommand::\cf30 GetLog\cf21 (path, limit, level), &tx_command, &rx_reply)\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\} \cf29 else\cf21  \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0rouille::Response::\cf30 empty_400\cf21 ()\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\} \cf29 else\cf21  \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0rouille::Response::\cf30 empty_400\cf21 ()\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\cf29 fn\cf21  \cf30 get_log_lines\cf21 (&\cf31 self\cf21 , path: &glob::Pattern, limit: \cf29 usize\cf21 , level: LogLevel) -> VecDeque<&LogLine>\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 let\cf21  \cf29 mut\cf21  result = VecDeque::\cf30 new\cf21 ();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 for\cf21  line \cf29 in\cf21  \cf31 self\cf21 .log_lines.\cf30 iter\cf21 ().\cf30 rev\cf21 () \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 if\cf21  line.level <= level && path.\cf30 matches\cf21 (&line.path) \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0result.\cf30 push_front\cf21 (line);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 if\cf21  result.\cf30 len\cf21 () >= limit \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf29 break\cf21 ;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0result\
\'a0\'a0\'a0\'a0\}\

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Use a background pattern\
\pard\pardeftab720\partightenfactor0
\cf2 * Work on an sdebug tool:\
	- try using jqeury to do ajax calls\
		save a copy of jquery locally\
	- use a linter\
	- make sure relative paths all land within the directory\
	- make sure that display state looks OK\
	- get state shouldn\'92t show \'93.display-\'93 keys\
	- support get map\
		svg would make mousing easier\
			{\field{\*\fldinst{HYPERLINK "http://dmitrybaranovskiy.github.io/raphael/"}}{\fldrslt \cf2 http://dmitrybaranovskiy.github.io/raphael/}}\
		support all the weird display options (using defaults where indicated)\
		units should default to components, i.e. 0,0 for first item, 1,0 for second\
		infer world size if it isnt set\
		make sure all of the battle bots display state is actually used\
	- support follow\
	- should have a 
\f1\fs40 \cf9 favicon.ico
\f0\fs48 \cf2 \
	- might be able to use cross-document messaging to make other windows update\
	- support get components\
		maybe include display-description\
		could also include state descriptions\
	- make sure that we can get info about the root, eg \'93get components .\'94\
	- support run\
	- support run with options\
	- verb and target can be abbreviated (as long as there is no ambiguity)\
	- can we fix doc comments so that `foo` has a link?\
	- if we add a dependency upon score then sdebug will show up as a dependent crate\
	- support tab completion:\
		{\field{\*\fldinst{HYPERLINK "https://robots.thoughtbot.com/tab-completion-in-gnu-readline"}}{\fldrslt https://robots.thoughtbot.com/tab-completion-in-gnu-readline}}\
	- readme should say how to setup toml file\
	- readme should point to sdebug\
	- publish a new version of score as well as sdebug\
* Support run-until:\
	- run-until target path?		run until the associated target changes\
	- target can be log, map, store, component\
* Support repeat:\
	- repeat delay?		repeat the last command until control-Ced\
	- maybe call this follow?\
	- delay does a sleep for that many time units\
* set state should support globs?\
* Support component:\
	- get component path?	print hierarchy\
	- may want a way for components to customize this \
* Support time:\
	- set time N		set time forward or backward (time suffix)\
	- set time +N time-suffix	advance time\
	- set time -N time-suffix		roll-back time (undo effectors)\
	- get time		print current time\
* Support map:\
	- set map size 10 10		display dimensions\
	- get map size		print display and actual dimensions\
	- maybe an option to show removed components\
	- document location-x/y, display-name, display-color\
	- probably need display-width/height too\
	- bots should set display-name to \'931.100\'94\
	- aggressive should be red, cowardly blue, maybe set dead to gray\
	* Add get removed, and maybe get removed path\
* Support get description\
\pard\pardeftab720\sl480\partightenfactor0

\f7\fs50\fsmilli25333 \cf32 \expnd0\expndtw0\kerning0
* Look at TODOs\
* Start using clippy\
* Might be able to cleanup the code a bit by making some modules directories\
* sdebug log should have a textarea at the bottom to control display\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 	# comments are hash mark in first column\
	# =~ is a case insensitive regex match\
	# !=~ is a case insensitive regex non-match\
	# expressions are applied in the order they are listed\
	# to be really cool could have an option to persist these\
	#time >= 0.0\
	level >= Debug\
	#show path =~ .+\
	#hide message =~ xxx\
	#color path red =~ error\
	#back color path gray =~ blah\
\pard\pardeftab720\sl480\partightenfactor0

\f7\fs50\fsmilli25333 \cf32 \expnd0\expndtw0\kerning0
* Add persistence?\
	- maybe with some simple viewer tools\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Start working on snet\
* Check parallelism:\
	- maintain a list of buckets where the bucket number is how many threads executed\
	- log that at debug\
	- counting should only be done if should_log\
\pard\pardeftab720\sl480\partightenfactor0

\f7\fs50\fsmilli25333 \cf32 \expnd0\expndtw0\kerning0
* Add an embedded web server\
	- starts up if \'97web\
	- waits for \'93run\'94 to be written to the web component\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Persist the store\
* Try 
\fs36 \cf0 \expnd0\expndtw0\kerning0
#[warn(unused_must_use)]
\fs48 \cf2 \kerning1\expnd0\expndtw0 \
* Try separate executioners\
* goals: deterministic, extensible, parallel, off-line analysis, portable, fast\
* use a write-once temporal store\
		- string keys, typed values\
			` for log lines auto-append onto the last value\
		- when running just use last recorded value\
		- for re-running just track keys that were registered by the client\
		- instead of a global lock, might want to have a concept of root nodes and put locks on those\
* Probably should have make targets to check finger prints\
* Could have optimistic parallelism:\
	- default to scheduling num cores components\
	- commit those that didn\'92t do a read from a key that a later time slice wrote to\
	- otherwise commit those that executed at the same time slice\
	- maybe self-adapt to scale back optimism\
* Need copyrights\
* could have reflected tables to encode meta info: units, blurb, default value, maybe ranges\
* http server uses REST to allow stuff to be get and set\
	0 can have integration tests\
* might also want some static sort of reporters\
	- maybe a version that spits out escaped text for console runs\
	- another could do rtf or markdown\
* have to pay close attention to reproducibility, even across architectures\
* Should be a way to collect results over runs\
* support multiple cores but not the cloud\
* probably just want to use code to configure\
* wonder if es could be sucked into the store\
* rsimnet, rsimserver\
}
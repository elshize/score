{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fmodern\fcharset0 Courier;
\f3\fnil\fcharset0 Menlo-BoldItalic;}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red38\green38\blue38;\red167\green54\blue202;
\red91\green88\blue76;\red84\green109\blue218;\red165\green66\blue16;\red240\green0\blue31;}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c20000\c20000\c20000;\cssrgb\c72157\c32941\c83137;
\cssrgb\c43137\c41961\c36863;\cssrgb\c40000\c51765\c88235;\cssrgb\c71373\c33725\c6667;\csgenericrgb\c94118\c0\c12157;}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-api-guidelines"}}{\fldrslt 
\f0\fs48 \cf2 https://github.com/brson/rust-api-guidelines}}
\f0\fs48 \cf2 \
https://pascalhertleif.de/artikel/good-practices-for-writing-rust-libraries/\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs36 \cf0 \CocoaLigature0 clear && cargo build && cargo test
\f0\fs48 \cf2 \CocoaLigature1 \
\
\
  /Users/jessejones/.cargo/bin\
  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-lang.github.io/book/second-edition/index.html"}}{\fldrslt \cf2 https://rust-lang.github.io/book/second-edition/index.html}}\
{\field{\*\fldinst{HYPERLINK "https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/"}}{\fldrslt https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2  can also use rc::Weak\
 \
 
\f2\fs40 \cf4 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec4 trait\cf5 \strokec5  \cf6 \strokec6 HasArea\cf5 \strokec5  \{\
\pard\pardeftab720\sl280\partightenfactor0
\cf5     \cf4 \strokec4 fn\cf5 \strokec5  \cf6 \strokec6 area\cf5 \strokec5 (&\cf4 \strokec4 self\cf5 \strokec5 ) -> \cf7 \strokec7 f64\cf5 \strokec5 ;\
\}\

\fs56 \

\fs40 \cf4 \strokec4 impl\cf5 \strokec5  HasArea \cf4 \strokec4 for\cf5 \strokec5  Circle \{\
    \cf4 \strokec4 fn\cf5 \strokec5  \cf6 \strokec6 area\cf5 \strokec5 (&\cf4 \strokec4 self\cf5 \strokec5 ) -> \cf7 \strokec7 f64\cf5 \strokec5  \{\
        std::\cf7 \strokec7 f64\cf5 \strokec5 ::consts::PI * (\cf4 \strokec4 self\cf5 \strokec5 .radius * \cf4 \strokec4 self\cf5 \strokec5 .radius)\
    \}\
\}
\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2  \
* Do we want to store logs in the store?\
* Need a LocalEnv to accumulate changes\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f3\i\b\fs40 \cf8 /// _Setters_ set a value for the current time. Note that it is a programmer error to
\f1\i0\b0 \cf0 \

\f3\i\b \cf8 /// set a value more than once for the current time.
\f1\i0\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 * Update the resl Rust.mimsy file\
* goals: deterministic, extensible, parallel, off-line analysis, portable, fast\
* use a write-once temporal store\
		- string keys, typed values\
			` for log lines auto-append onto the last value\
		- when running just use last recorded value\
		- for re-running just track keys that were registered by the client\
		- instead of a global lock, might want to have a concept of root nodes and put locks on those\
* call check_descriptions when the simulation exits\
* Deliver events scheduled at the same time concurrently\
	- mention that parallelism will increase with lower time resolutions\
* Need copyrights\
* could have reflected tables to encode meta info: units, blurb, default value, maybe ranges\
* http server uses REST to allow stuff to be get and set\
	0 can have integration tests\
* might also want some static sort of reporters\
	- maybe a version that spits out escaped text for console runs\
	- another could do rtf or markdown\
* have to pay close attention to reproducibility, even across architectures\
* support multiple cores but not the cloud\
* probably just want to use code to configure\
* example could be a bank of elevators\
	- params: number of elevators, speed, behavior (stay in place, move to top, some move to top)\
			ratio of people getting on at top to at bottom\
	- track average wait time and worst wait time\
* wonder if es could be sucked into the store\
* rsimnet, rsimserver\
}
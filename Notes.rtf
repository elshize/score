{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 Menlo-Italic;\f4\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red9\green80\blue208;\red0\green72\blue255;
\red36\green38\blue41;\red37\green127\blue159;\red13\green0\blue129;\red43\green39\blue19;\red235\green236\blue237;
\red161\green33\blue108;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c0\c41176\c85098;\csgenericrgb\c0\c28235\c100000;
\cssrgb\c18824\c20000\c21176;\cssrgb\c16863\c56863\c68627;\cssrgb\c6275\c6275\c58039;\cssrgb\c22353\c20000\c9412;\cssrgb\c93725\c94118\c94510;
\csgenericrgb\c63137\c12941\c42353;\cssrgb\c0\c0\c0;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf2 publishing a new version\
	change the version number \
		dependencies auto-update if the first non-zero number doesn\'92t change\
	cargo package\
		optional, allows you to inspect the target/package/*.crate file\
	cargo publish\
\
{\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-api-guidelines"}}{\fldrslt https://github.com/brson/rust-api-guidelines}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://deterministic.space/elegant-apis-in-rust.html"}}{\fldrslt \cf2 https://deterministic.space/elegant-apis-in-rust.html}}\cf2 \
https://pascalhertleif.de/artikel/good-practices-for-writing-rust-libraries/\
  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-lang.github.io/book/second-edition/index.html"}}{\fldrslt \cf2 https://rust-lang.github.io/book/second-edition/index.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://doc.rust-lang.org/stable/nomicon/README.html"}}{\fldrslt \cf2 https://doc.rust-lang.org/stable/nomicon/README.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/"}}{\fldrslt \cf2 https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/rust-unofficial/patterns"}}{\fldrslt \cf2 https://github.com/rust-unofficial/patterns}}\
 {\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-cookbook"}}{\fldrslt 
\fs36 \cf3 \expnd0\expndtw0\kerning0
\ul \ulc3 https://github.com/brson/rust-cookbook}}
\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
{\field{\*\fldinst{HYPERLINK "https://thesquareplanet.com/blog/rust-tips-and-tricks/"}}{\fldrslt https://thesquareplanet.com/blog/rust-tips-and-tricks/}}\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://danielkeep.github.io/itercheat_baked.html"}}{\fldrslt 
\fs48 \cf0 https://danielkeep.github.io/itercheat_baked.html}}\
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 \kerning1\expnd0\expndtw0 \
rouille	really simple, active\
rustful	fairly light weight, built on top of hyper\
		lot of docs, active\
iron	pretty heavy weight\
		very active\
		{\field{\*\fldinst{HYPERLINK "https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron"}}{\fldrslt https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron}}\
nickel	fairly light weight, built on top of hyper\
		lot of examples, iffy docs, inactive\
pencil	very light weight, built on top of hyper\
		inactive\
		\
		\
curl http://127.0.0.1:9000/log/all\
\
curl -X PUT http://127.0.0.1:9000/set/time/10\
\
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f2\b \cf4 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\b0 \cf0 		\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f2\b \cf4 enum
\f1\b0 \cf0  
\f2\b\fs48 \shad\shadx21\shady-22\shadr38\shado77 \shadc0 RestCommand
\f1\b0\fs40 \shad0 \
\{\
	GetLog,\
	SetTime(\cf4 f64\cf0 ),\
\}\
\

\f2\b \cf4 struct
\f1\b0 \cf0  
\f2\b\fs48 \shad\shadx21\shady-22\shadr38\shado77 \shadc0 RestReply
\f1\b0\fs40 \shad0 \
\{\
	
\f3\i \cf4 data
\f1\i0 \cf0 : \cf4 String\cf0 ,\
	
\f3\i \cf4 code
\f1\i0 \cf0 : \cf4 u16\cf0 ,\
\}\
\
\pard\pardeftab963\pardirnatural\partightenfactor0
\cf0 \
\pard\pardeftab720\sl300\partightenfactor0

\fs32 \cf5 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec5 #[derive(\cf6 \strokec6 PartialEq\cf5 \strokec5 )]\
\cf7 \strokec7 enum\cf5 \strokec5  \cf6 \strokec6 MyEnum\cf5 \strokec5  \{ ... \}\cf8 \cb9 \strokec8 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\pardeftab720\partightenfactor0
\cf2 \
\
* Weight/finances\
* Present\
* Order shower curtain liner\
* Work on an sdebug tool:\
	- color code logging\
	- add a \'97no-color option\
	- support state commands\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 		\cf10 get state\cf0 \
		\cf10 get state <path>\cf0 \
		\cf10 set state <path> <value>\cf0 \
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf2 	- make sure that we can get info about the root\
	- verb can be get, set, run-until, repeat\
	- target can be log, map, state, component, time\
	- verb and target can be abbreviated (as long as there is no ambiguity)\
	- paths can be globbed\
	- can we fix doc comments so that `foo` has a link?\
	- if we add a dependency upon score then sdebug will show up as a dependent crate\
	- probably should use ReadLine\
		{\field{\*\fldinst{HYPERLINK "https://robots.thoughtbot.com/tab-completion-in-gnu-readline"}}{\fldrslt https://robots.thoughtbot.com/tab-completion-in-gnu-readline}}\
	- readme should say how to setup toml file\
	- readme should point to sdebug\
	- publish a new version of score as well as sdebug\
* Support log:\
	- get log path?		print the entire log\
	- get log path? N		print the last N logs\
	- get log path? N time-suffix	print the last time unit logs\
* Support run-until:\
	- run-until target path?		run until the associated target changes\
	- target can be log, map, store, component\
* Support repeat:\
	- repeat delay?		repeat the last command until control-Ced\
	- delay does a sleep for that many time units\
* Support state:\
	- set state path value\
	- get state path?\
	- get state all\
* Support component:\
	- get component path?	print hierarchy\
	- may want a way for components to customize this \
* Support time:\
	- set time N		set time forward or backward (time suffix)\
	- set time +N time-suffix	advance time\
	- set time -N time-suffix		roll-back time (undo effectors)\
	- get time		print current time\
* Support map:\
	- set map size 10 10		display dimensions\
	- get map size		print display and actual dimensions\
	- maybe an option to show removed components\
	- document location-x/y, display-name, display-color\
	- probably need display-width/height too\
	- bots should set display-name to \'931.100\'94\
	- aggressive should be red, cowardly blue, maybe set dead to gray\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs50\fsmilli25333 \cf11 \expnd0\expndtw0\kerning0
* Look at TODOs\
* Start using clippy\
* Might be able to cleanup the code a bit by making some moduels directories\
* Add persistence?\
	- maybe with some simple viewer tools\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Start working on snet\
* Check parallelism:\
	- maintain a list of buckets where the bucket number is how many threads executed\
	- log that at debug\
	- counting should only be done if should_log\
\pard\pardeftab720\sl480\partightenfactor0

\f4\fs50\fsmilli25333 \cf11 \expnd0\expndtw0\kerning0
* Add an embedded web server\
	- starts up if \'97web\
	- waits for \'93run\'94 to be written to the web component\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Persist the store\
* Try 
\fs36 \cf0 \expnd0\expndtw0\kerning0
#[warn(unused_must_use)]
\fs48 \cf2 \kerning1\expnd0\expndtw0 \
* Try separate executioners\
* goals: deterministic, extensible, parallel, off-line analysis, portable, fast\
* use a write-once temporal store\
		- string keys, typed values\
			` for log lines auto-append onto the last value\
		- when running just use last recorded value\
		- for re-running just track keys that were registered by the client\
		- instead of a global lock, might want to have a concept of root nodes and put locks on those\
* Probably should have make targets to check finger prints\
* Could have optimistic parallelism:\
	- default to scheduling num cores components\
	- commit those that didn\'92t do a read from a key that a later time slice wrote to\
	- otherwise commit those that executed at the same time slice\
	- maybe self-adapt to scale back optimism\
* Need copyrights\
* could have reflected tables to encode meta info: units, blurb, default value, maybe ranges\
* http server uses REST to allow stuff to be get and set\
	0 can have integration tests\
* might also want some static sort of reporters\
	- maybe a version that spits out escaped text for console runs\
	- another could do rtf or markdown\
* have to pay close attention to reproducibility, even across architectures\
* Should be a way to collect results over runs\
* support multiple cores but not the cloud\
* probably just want to use code to configure\
* wonder if es could be sucked into the store\
* rsimnet, rsimserver\
}
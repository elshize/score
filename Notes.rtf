{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red9\green80\blue208;\red0\green0\blue0;
\red60\green60\blue59;\red254\green228\blue200;\red60\green60\blue59;\red203\green0\blue77;\red9\green76\blue116;
\red203\green74\blue5;\red95\green124\blue3;\red130\green130\blue130;\red240\green240\blue240;\red51\green136\blue141;
\red167\green54\blue202;\red91\green88\blue76;\red165\green66\blue16;\red0\green0\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c0\c41176\c85098;\csgray\c0;
\cssrgb\c30196\c30196\c29804;\cssrgb\c100000\c91449\c82330;\cssrgb\c30196\c30196\c29804;\cssrgb\c84314\c0\c37255;\cssrgb\c0\c37255\c52941;
\cssrgb\c84314\c37255\c0;\cssrgb\c44314\c54902\c0;\cssrgb\c58039\c58039\c58039;\cssrgb\c95294\c95294\c95294;\cssrgb\c24314\c60000\c62353;
\cssrgb\c72157\c32941\c83137;\cssrgb\c43137\c41961\c36863;\cssrgb\c71373\c33725\c6667;\cssrgb\c0\c0\c0;}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf2 publishing a new version\
	try clippy (requires nightly for now)\
	make sure tests work\
	make sure examples work\
	change the version number \
		dependencies auto-update if the first non-zero number doesn\'92t change\
	update categories (after slug pull request)\
	
\f1\fs34 \cf0 \CocoaLigature0 git tag version-0.X.0
\f0\fs48 \cf2 \CocoaLigature1 \
	cargo package\
		optional, allows you to inspect the target/package/*.crate file\
	cargo publish\
\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-api-guidelines"}}{\fldrslt \cf2 https://github.com/brson/rust-api-guidelines}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://deterministic.space/elegant-apis-in-rust.html"}}{\fldrslt \cf2 https://deterministic.space/elegant-apis-in-rust.html}}\
https://pascalhertleif.de/artikel/good-practices-for-writing-rust-libraries/\
  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-lang.github.io/book/second-edition/index.html"}}{\fldrslt \cf2 https://rust-lang.github.io/book/second-edition/index.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://doc.rust-lang.org/stable/nomicon/README.html"}}{\fldrslt \cf2 https://doc.rust-lang.org/stable/nomicon/README.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/"}}{\fldrslt \cf2 https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/rust-unofficial/patterns"}}{\fldrslt \cf2 https://github.com/rust-unofficial/patterns}}\
 {\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-cookbook"}}{\fldrslt 
\fs36 \cf3 \expnd0\expndtw0\kerning0
\ul \ulc3 https://github.com/brson/rust-cookbook}}
\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
{\field{\*\fldinst{HYPERLINK "https://thesquareplanet.com/blog/rust-tips-and-tricks/"}}{\fldrslt https://thesquareplanet.com/blog/rust-tips-and-tricks/}}\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://danielkeep.github.io/itercheat_baked.html"}}{\fldrslt 
\fs48 \cf0 https://danielkeep.github.io/itercheat_baked.html}}\
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 \kerning1\expnd0\expndtw0 \
rouille	really simple, active\
rustful	fairly light weight, built on top of hyper\
		lot of docs, active\
iron	pretty heavy weight\
		very active\
		{\field{\*\fldinst{HYPERLINK "https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron"}}{\fldrslt https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron}}\
nickel	fairly light weight, built on top of hyper\
		lot of examples, iffy docs, inactive\
pencil	very light weight, built on top of hyper\
		inactive\
		\
		\
curl http://127.0.0.1:9000/log/all\
\
curl -X PUT http://127.0.0.1:9000/set/time/10\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://es6-features.org/#Constants"}}{\fldrslt 
\fs36 \cf4 \CocoaLigature0 http://es6-features.org/#Constants}}
\fs36 \cf4 \CocoaLigature0 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \CocoaLigature1 \
\pard\pardeftab720\sl540\partightenfactor0

\f1\fs36 \cf5 \expnd0\expndtw0\kerning0
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf0 \kerning1\expnd0\expndtw0 \CocoaLigature0 cargo test -- --nocapture\
\cb6 \

\f0\fs48 \cf2 \cb1 \CocoaLigature1 \
\pard\pardeftab720\sl420\partightenfactor0

\f1\fs28 \cf7 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec7     #[test]\
    \cf8 \strokec8 fn\cf7 \strokec7  \cf9 \strokec9 ipv4_to_ipv4\cf7 \strokec7 ()\
\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  config = Config::\cf9 \strokec9 with_seed\cf7 \strokec7 (\cf10 \strokec10 1\cf7 \strokec7 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  \cf8 \strokec8 mut\cf7 \strokec7  sim = Simulation::\cf9 \strokec9 new\cf7 \strokec7 (config);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  world_id = sim.\cf9 \strokec9 add_component\cf7 \strokec7 (\cf11 \strokec11 "world"\cf7 \strokec7 , NO_COMPONENT);\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf12 \strokec12 // Create the devices,\cf7 \strokec7 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  \cf8 \strokec8 mut\cf7 \strokec7  sender = IPv4Component::\cf9 \strokec9 new\cf7 \strokec7 (&\cf8 \strokec8 mut\cf7 \strokec7  sim, world_id);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  receiver = IPv4Component::\cf9 \strokec9 new\cf7 \strokec7 (&\cf8 \strokec8 mut\cf7 \strokec7  sim, world_id);\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf12 \strokec12 // wire them together,\cf7 \strokec7 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0last_port.\cf9 \strokec9 connect_to\cf7 \strokec7 (&r.inbound);\
\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  \cf8 \strokec8 mut\cf7 \strokec7  last_port = &\cf8 \strokec8 mut\cf7 \strokec7  sender.outbound;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 for\cf7 \strokec7  r \cf8 \strokec8 in\cf7 \strokec7  repeaters.\cf9 \strokec9 iter_mut\cf7 \strokec7 () \{\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0last_port.\cf9 \strokec9 connect_to\cf7 \strokec7 (&r.inbound);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0last_port = &\cf8 \strokec8 mut\cf7 \strokec7  r.outbound;\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0last_port.\cf9 \strokec9 connect_to\cf7 \strokec7 (&receiver.inbound);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf12 \strokec12 // This is used by GUIs, e.g. sdebug.\cf7 \strokec7 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  \cf8 \strokec8 mut\cf7 \strokec7  effector = Effector::\cf9 \strokec9 new\cf7 \strokec7 ();\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0effector.\cf9 \strokec9 set_float\cf7 \strokec7 (\cf11 \strokec11 "display-size-x"\cf7 \strokec7 , DISPLAY_WIDTH);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0effector.\cf9 \strokec9 set_float\cf7 \strokec7 (\cf11 \strokec11 "display-size-y"\cf7 \strokec7 , DISPLAY_HEIGHT);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0effector.\cf9 \strokec9 set_string\cf7 \strokec7 (\cf11 \strokec11 "display-title"\cf7 \strokec7 , \cf11 \strokec11 "telephone"\cf7 \strokec7 );\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sim.\cf9 \strokec9 apply\cf7 \strokec7 (world_id, effector);\
\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf12 \strokec12 // and spin up their threads.\cf7 \strokec7 \
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0sender.\cf9 \strokec9 start\cf7 \strokec7 (&\cf8 \strokec8 mut\cf7 \strokec7  sim);\
\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 for\cf7 \strokec7  \cb13 r \cf8 \strokec8 in\cf7 \strokec7  repeaters.\cf9 \strokec9 drain\cf7 \strokec7 (..) \{\cb1 \
\cb13 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0r.\cf9 \strokec9 start\cf7 \strokec7 (&\cf8 \strokec8 mut\cf7 \strokec7  sim);\cb1 \
\cb13 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\}\cb1 \
\cb13 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0receiver.\cf9 \strokec9 start\cf7 \strokec7 (&\cf8 \strokec8 mut\cf7 \strokec7  sim, local.num_repeaters);\cb1 \
\cb13 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf8 \strokec8 let\cf7 \strokec7  finger_print = sim.\cf9 \strokec9 run\cf7 \strokec7 ();\cb1 \
\cb13 \'a0\'a0\'a0\'a0\'a0\'a0\'a0\'a0\cf14 \strokec14 assert_eq!\cf7 \strokec7 (\cf10 \strokec10 0\cf7 \strokec7 , finger_print);\cb1 \
\cb13 \'a0\'a0\'a0\'a0\}\cb1 \
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \

\b        user\
\
       application\
\

\b0      socket?\
\
udp        tcp         
\b transport\
     
\b0 \\        /
\b  \

\b0   lower_transport   in general components send a packet and their struct\
          |\
          |\
  upper_internet   
\b internet
\b0 \
     /        \\\
IPv4       IPv6
\b \

\b0       \\        /\
       \\     /\

\b         
\b0 MAC             
\b link\
        \
        physical\
 
\b0 \
\
\pard\pardeftab720\sl480\partightenfactor0

\f1\fs42 \cf15 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec15 fn\cf16 \strokec16 (\cf17 \strokec17 i32\cf16 \strokec16 ) -> \cf17 \strokec17 i32\
fn pointer (doesn\'92t accept a closure)\
\

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
\cf2 \
* Nails\
* Dish washer\
* Status report\
* Create an echo app:\
	- get internet to internet working\
	- add in link layer\
	- add in physical layer\
	- add in transport layer\
	- try and get tcpdump working\
\
	- add lower_transport component\
	- might want internet and transport components\
	- use a real enum for protocol\
	- do a commit once unit test works again\
	- make file should probably check checksum\
		or just have main do it\
	- could have a make check\
		runs all examples\
		uses \'97finger-print option (examples assert if finger print option is used)\
	- for unit tests could just feed inputs into a component and look at outputs\
		maybe build a sim to do that\
* Start working on snet:\
	- write an IP test: two IP components directly connected\
	- send an IP packet to loopback\
	- might want to use tshark to test packet encoding\
	- can we save off pcaps?\
\pard\pardeftab720\sl480\partightenfactor0

\f2\fs50\fsmilli25333 \cf18 \expnd0\expndtw0\kerning0
* Start using clippy\
* Add persistence?\
	- maybe with some simple viewer tools\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Check parallelism:\
	- maintain a list of buckets where the bucket number is how many threads executed\
	- log that at debug\
	- counting should only be done if should_log\
* Try 
\fs36 \cf0 \expnd0\expndtw0\kerning0
#[warn(unused_must_use)]
\fs48 \cf2 \kerning1\expnd0\expndtw0 \
* Try separate executioners\
* Probably should have make targets to check finger prints\
* Could have optimistic parallelism:\
	- default to scheduling num cores components\
	- commit those that didn\'92t do a read from a key that a later time slice wrote to\
	- otherwise commit those that executed at the same time slice\
	- maybe self-adapt to scale back optimism\
* could have reflected tables to encode meta info: units, blurb, default value, maybe ranges\
* might also want some static sort of reporters\
	- maybe a version that spits out escaped text for console runs\
	- another could do rtf or markdown\
* have to pay close attention to reproducibility, even across architectures\
* Should be a way to collect results over runs\
* support multiple cores but not the cloud\
* probably just want to use code to configure\
* wonder if es could be sucked into the store\
\pard\pardeftab720\partightenfactor0
\cf2 * Would be cool to have a checkbox for animated runs\
	- could have a checkbox under the run until button\
	- would need to change Run Until to Stop\
	- would need to disable Run Until Changed\
\pard\pardeftab720\sl480\partightenfactor0

\f2\fs50\fsmilli25333 \cf18 \expnd0\expndtw0\kerning0
* Could have a specialized project just to show log files:\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 	# comments are hash mark in first column\
	# =~ is a case insensitive regex match\
	# !=~ is a case insensitive regex non-match\
	# expressions are applied in the order they are listed\
	# to be really cool could have an option to persist these\
	#time >= 0.0\
	level >= Debug\
	#show path =~ .+\
	#hide message =~ xxx\
	#color path red =~ error\
	#back color path gray =~ blah\
}
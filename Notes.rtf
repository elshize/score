{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
\f3\fnil\fcharset0 Menlo-Bold;\f4\fnil\fcharset0 Menlo-Italic;\f5\fswiss\fcharset0 ArialMT;
}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red9\green80\blue208;\red36\green38\blue41;
\red37\green127\blue159;\red13\green0\blue129;\red43\green39\blue19;\red235\green236\blue237;\red161\green33\blue108;
\red240\green0\blue31;\red0\green72\blue255;\red104\green0\blue254;\red140\green83\blue65;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c0\c41176\c85098;\cssrgb\c18824\c20000\c21176;
\cssrgb\c16863\c56863\c68627;\cssrgb\c6275\c6275\c58039;\cssrgb\c22353\c20000\c9412;\cssrgb\c93725\c94118\c94510;\csgenericrgb\c63137\c12941\c42353;
\csgenericrgb\c94118\c0\c12157;\csgenericrgb\c0\c28235\c100000;\csgenericrgb\c40784\c0\c99608;\csgenericrgb\c54902\c32549\c25490;\cssrgb\c0\c0\c0;
}
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs48 \cf2 publishing a new version\
	change the version number \
		dependencies auto-update if the first non-zero number doesn\'92t change\
	cargo package\
		optional, allows you to inspect the target/package/*.crate file\
	cargo publish\
\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-api-guidelines"}}{\fldrslt \cf2 https://github.com/brson/rust-api-guidelines}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://deterministic.space/elegant-apis-in-rust.html"}}{\fldrslt \cf2 https://deterministic.space/elegant-apis-in-rust.html}}\cf2 \
https://pascalhertleif.de/artikel/good-practices-for-writing-rust-libraries/\
  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-lang.github.io/book/second-edition/index.html"}}{\fldrslt \cf2 https://rust-lang.github.io/book/second-edition/index.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://doc.rust-lang.org/stable/nomicon/README.html"}}{\fldrslt \cf2 https://doc.rust-lang.org/stable/nomicon/README.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/"}}{\fldrslt \cf2 https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/rust-unofficial/patterns"}}{\fldrslt \cf2 https://github.com/rust-unofficial/patterns}}\
 {\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-cookbook"}}{\fldrslt 
\fs36 \cf3 \expnd0\expndtw0\kerning0
\ul \ulc3 https://github.com/brson/rust-cookbook}}
\fs36 \cf0 \expnd0\expndtw0\kerning0
\
\pard\pardeftab720\partightenfactor0
\cf0 \
{\field{\*\fldinst{HYPERLINK "https://thesquareplanet.com/blog/rust-tips-and-tricks/"}}{\fldrslt https://thesquareplanet.com/blog/rust-tips-and-tricks/}}\
\pard\pardeftab720\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://danielkeep.github.io/itercheat_baked.html"}}{\fldrslt 
\fs48 \cf0 https://danielkeep.github.io/itercheat_baked.html}}\
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 \kerning1\expnd0\expndtw0 \
rouille	really simple, active\
rustful	fairly light weight, built on top of hyper\
		lot of docs, active\
iron	pretty heavy weight\
		very active\
		{\field{\*\fldinst{HYPERLINK "https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron"}}{\fldrslt https://www.jamestease.co.uk/blether/writing-a-basic-json-web-server-in-rust-using-iron}}\
nickel	fairly light weight, built on top of hyper\
		lot of examples, iffy docs, inactive\
pencil	very light weight, built on top of hyper\
		inactive\
		\
		\
curl http://127.0.0.1:9000/log/all\
\
curl -X PUT http://127.0.0.1:9000/set/time/10\
\
\
\pard\pardeftab720\sl300\partightenfactor0

\fs32 \cf4 \expnd0\expndtw0\kerning0
#[derive(\cf5 PartialEq\cf4 )]\
\cf6 enum\cf4  \cf5 MyEnum\cf4  \{ ... \}\cf7 \cb8 \

\f0\fs48 \cf2 \cb1 \kerning1\expnd0\expndtw0 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 (cmd(\cf9 "follow log [level]"\cf0 ),              get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow log <path> [level]"\cf0 ),       get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow map"\cf0 ),                      get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow state"\cf0 ),                    get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "follow state <path>"\cf0 ),             get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
\
(cmd(\cf9 \'93get components\'93\cf0 ),                  get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 \'93get components <path>\'93\cf0 ),           get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 \'93get map\'94\cf0 ),                         get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
\
(cmd(\cf9 "run"\cf0 ),                             get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run log [level]"\cf0 ),                 get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run log <path> [level]"\cf0 ),          get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run map"\cf0 ),                         get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run state"\cf0 ),                       get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
(cmd(\cf9 "run state <path>"\cf0 ),                get_log_all,    \cf9 "print the logs for all components"\cf0 ),\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \
\
sender       repeater       repeater      receiver\
   |                     ||                 | |                ||\
   |                  stats            stats          stats\
   |                     ||                  ||               | |\
mangle   \'97 mangle \'97\'97 mangle \'97 mangle     should only mangle on incoming\
\
\
     send_up    sent_down\
                |     |\
inbound 
\b \cf2 mangle 
\b0 \cf2 outbound\
\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f1\fs40 \cf0 \
\pard\pardeftab963\pardirnatural\partightenfactor0

\f2\i\b \cf10 /// Helper for components that want to maintain an (x, y) position. This will handle the
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// following events:
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// * "set-location" - Sets the data using an (f64, f64) event payload.
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// * "offset-location" - Add values to the data using an (f64, f64) event payload.
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// Note that this will panic if sent an event not listed above.
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 ///
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// If origin is missing GUIs should assume zero, if size is missing GUIs should assume
\f1\i0\b0 \cf0 \

\f2\i\b \cf10 /// 1.0, if units are missing then GUIs should assume meters.
\f1\i0\b0 \cf0 \

\f3\b \cf11 pub
\f1\b0 \cf0  
\f3\b \cf11 fn
\f1\b0 \cf0  
\f3\b handle_location_event
\f1\b0 (
\f4\i \cf11 id
\f1\i0 \cf0 : ComponentID, 
\f4\i \cf11 state
\f1\i0 \cf0 : &SimState, 
\f4\i \cf11 event
\f1\i0 \cf0 : &Event, 
\f4\i \cf11 effector
\f1\i0 \cf0 : &
\f3\b \cf11 mut
\f1\b0 \cf0  Effector)\
\{\
	
\f3\b \cf11 let
\f1\b0 \cf0  cname = &(*state.components).get(id).name;\
	
\f3\b \cf11 let
\f1\b0 \cf0  ename = &event.name;\
	
\f3\b \cf11 if
\f1\b0 \cf0  ename == \cf9 "set-location"\cf0  \{\
		
\f3\b \cf11 let
\f1\b0 \cf0  loc = event.expect_payload::<(\cf11 f64\cf0 , \cf11 f64\cf0 )>(&\cf12 format!\cf0 (\cf9 "component \{\} set-location should have an (f64, f64) payload"\cf0 , cname));\
		log_info!(effector, \cf9 "setting location to \{:.1\}, \{:.1\}"\cf0 , loc\cf13 .0\cf0 , loc\cf13 .1\cf0 );\
		effector.set_float(\cf9 "display-location-x"\cf0 , loc\cf13 .0\cf0 );\
		effector.set_float(\cf9 "display-location-y"\cf0 , loc\cf13 .1\cf0 );\
		\
	\} 
\f3\b \cf11 else
\f1\b0 \cf0  
\f3\b \cf11 if
\f1\b0 \cf0  ename == \cf9 "offset-location"\cf0  \{\
		
\f3\b \cf11 let
\f1\b0 \cf0  path = state.components.path(id);\
		
\f3\b \cf11 let
\f1\b0 \cf0  x = state.store.get_float(&(path.clone() + \cf9 ".display-location-x"\cf0 ));\
		
\f3\b \cf11 let
\f1\b0 \cf0  y = state.store.get_float(&(path + \cf9 ".display-location-y"\cf0 ));\
\
		
\f3\b \cf11 let
\f1\b0 \cf0  loc = event.expect_payload::<(\cf11 f64\cf0 , \cf11 f64\cf0 )>(&\cf12 format!\cf0 (\cf9 "component \{\} offset-location should have an (f64, f64) payload"\cf0 , cname));\
		log_info!(effector, \cf9 "setting location to \{:.1\}, \{:.1\}"\cf0 , x+loc\cf13 .0\cf0 , y+loc\cf13 .1\cf0 );\
		effector.set_float(\cf9 "display-location-x"\cf0 , x+loc\cf13 .0\cf0 );\
		effector.set_float(\cf9 "display-location-y"\cf0 , y+loc\cf13 .1\cf0 );\
		\
	\} 
\f3\b \cf11 else
\f1\b0 \cf0  \{\
		\cf12 panic!\cf0 (\cf9 "handle_location_event doesn't know how to handle \{\}"\cf0 , ename);\
	\}\
\}\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2 Structure: (?<= trait) (?: (?: \\s* < [\\w:\\s,+]+ > \\s*) | \\s+) ([\\w@~&]+)\
Structure: (?<= impl) (?: (?: \\s* < [\\w:\\s,+]+ > \\s*) | \\s+) ([\\w@~&]+)\
\pard\pardeftab963\pardirnatural\partightenfactor0
\cf2 \
\
\pard\pardeftab720\partightenfactor0
\cf2 * AC\
* Add a telephone example:\
	- devices should use an effector to initialize themselves\
		maybe even use a single effector\
	- coordinates should be in component units\
		display-size should be inferable\
	- update battle bots (or at least add comments)\
	- should state include units? make that part of the name?\
		may be tricky to make it part of the name if it also has to be an ident\
* Do another release\
* Work on an sdebug tool:\
	- make sure that display state looks OK\
	- get state shouldn\'92t show \'93.display-\'93 keys\
	- support get map\
		support all the weird display options (using defaults where indicated)\
	- support follow\
	- support get components\
		maybe include display-description\
		could also include state descriptions\
	- make sure that we can get info about the root, eg \'93get components .\'94\
	- support run\
	- support run with options\
	- verb and target can be abbreviated (as long as there is no ambiguity)\
	- can we fix doc comments so that `foo` has a link?\
	- if we add a dependency upon score then sdebug will show up as a dependent crate\
	- support tab completion:\
		{\field{\*\fldinst{HYPERLINK "https://robots.thoughtbot.com/tab-completion-in-gnu-readline"}}{\fldrslt \cf2 https://robots.thoughtbot.com/tab-completion-in-gnu-readline}}\
	- readme should say how to setup toml file\
	- readme should point to sdebug\
	- publish a new version of score as well as sdebug\
* Support run-until:\
	- run-until target path?		run until the associated target changes\
	- target can be log, map, store, component\
* Support repeat:\
	- repeat delay?		repeat the last command until control-Ced\
	- maybe call this follow?\
	- delay does a sleep for that many time units\
* set state should support globs?\
* Support component:\
	- get component path?	print hierarchy\
	- may want a way for components to customize this \
* Support time:\
	- set time N		set time forward or backward (time suffix)\
	- set time +N time-suffix	advance time\
	- set time -N time-suffix		roll-back time (undo effectors)\
	- get time		print current time\
* Support map:\
	- set map size 10 10		display dimensions\
	- get map size		print display and actual dimensions\
	- maybe an option to show removed components\
	- document location-x/y, display-name, display-color\
	- probably need display-width/height too\
	- bots should set display-name to \'931.100\'94\
	- aggressive should be red, cowardly blue, maybe set dead to gray\
	* Add get removed, and maybe get removed path\
* Support get description\
\pard\pardeftab720\sl480\partightenfactor0

\f5\fs50\fsmilli25333 \cf14 \expnd0\expndtw0\kerning0
* Look at TODOs\
* Start using clippy\
* Might be able to cleanup the code a bit by making some moduels directories\
* Add persistence?\
	- maybe with some simple viewer tools\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Start working on snet\
* Check parallelism:\
	- maintain a list of buckets where the bucket number is how many threads executed\
	- log that at debug\
	- counting should only be done if should_log\
\pard\pardeftab720\sl480\partightenfactor0

\f5\fs50\fsmilli25333 \cf14 \expnd0\expndtw0\kerning0
* Add an embedded web server\
	- starts up if \'97web\
	- waits for \'93run\'94 to be written to the web component\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 \kerning1\expnd0\expndtw0 * Persist the store\
* Try 
\fs36 \cf0 \expnd0\expndtw0\kerning0
#[warn(unused_must_use)]
\fs48 \cf2 \kerning1\expnd0\expndtw0 \
* Try separate executioners\
* goals: deterministic, extensible, parallel, off-line analysis, portable, fast\
* use a write-once temporal store\
		- string keys, typed values\
			` for log lines auto-append onto the last value\
		- when running just use last recorded value\
		- for re-running just track keys that were registered by the client\
		- instead of a global lock, might want to have a concept of root nodes and put locks on those\
* Probably should have make targets to check finger prints\
* Could have optimistic parallelism:\
	- default to scheduling num cores components\
	- commit those that didn\'92t do a read from a key that a later time slice wrote to\
	- otherwise commit those that executed at the same time slice\
	- maybe self-adapt to scale back optimism\
* Need copyrights\
* could have reflected tables to encode meta info: units, blurb, default value, maybe ranges\
* http server uses REST to allow stuff to be get and set\
	0 can have integration tests\
* might also want some static sort of reporters\
	- maybe a version that spits out escaped text for console runs\
	- another could do rtf or markdown\
* have to pay close attention to reproducibility, even across architectures\
* Should be a way to collect results over runs\
* support multiple cores but not the cloud\
* probably just want to use code to configure\
* wonder if es could be sucked into the store\
* rsimnet, rsimserver\
}
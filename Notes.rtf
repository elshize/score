{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf820
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-BoldItalic;
}
{\colortbl;\red255\green255\blue255;\red2\green2\blue2;\red91\green88\blue76;\red240\green0\blue31;
}
{\*\expandedcolortbl;;\csgenericrgb\c784\c784\c784;\cssrgb\c43137\c41961\c36863;\csgenericrgb\c94118\c0\c12157;
}
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://github.com/brson/rust-api-guidelines"}}{\fldrslt 
\f0\fs48 \cf2 https://github.com/brson/rust-api-guidelines}}
\f0\fs48 \cf2 \
https://pascalhertleif.de/artikel/good-practices-for-writing-rust-libraries/\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs36 \cf0 \CocoaLigature0 clear && cargo build && cargo test
\f0\fs48 \cf2 \CocoaLigature1 \
\
\
  /Users/jessejones/.cargo/bin\
  \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-lang.github.io/book/second-edition/index.html"}}{\fldrslt \cf2 https://rust-lang.github.io/book/second-edition/index.html}}\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/"}}{\fldrslt \cf2 https://rust-leipzig.github.io/architecture/2016/12/20/idiomatic-trees-in-rust/}}\
 can also use rc::Weak\
 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0
\cf2  \
* Add support for initializing settings\
* Implement _check_descriptions\
* Need a LocalEnv to accumulate changes\
\pard\pardeftab963\pardirnatural\partightenfactor0

\f2\i\b\fs40 \cf4 /// _Setters_ set a value for the current time. Note that it is a programmer error to
\f1\i0\b0 \cf0 \

\f2\i\b \cf4 /// set a value more than once for the current time.
\f1\i0\b0 \cf0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f0\fs48 \cf2 * Update the resl Rust.mimsy file\
* goals: deterministic, extensible, parallel, off-line analysis, portable, fast\
* use a write-once temporal store\
		- string keys, typed values\
			` for log lines auto-append onto the last value\
		- when running just use last recorded value\
		- for re-running just track keys that were registered by the client\
		- instead of a global lock, might want to have a concept of root nodes and put locks on those\
* call check_descriptions when the simulation exits\
* Deliver events scheduled at the same time concurrently\
	- mention that parallelism will increase with lower time resolutions\
* Need copyrights\
* could have reflected tables to encode meta info: units, blurb, default value, maybe ranges\
* http server uses REST to allow stuff to be get and set\
	0 can have integration tests\
* might also want some static sort of reporters\
	- maybe a version that spits out escaped text for console runs\
	- another could do rtf or markdown\
* have to pay close attention to reproducibility, even across architectures\
* support multiple cores but not the cloud\
* probably just want to use code to configure\
* example could be a bank of elevators\
	- params: number of elevators, speed, behavior (stay in place, move to top, some move to top)\
			ratio of people getting on at top to at bottom\
	- track average wait time and worst wait time\
* wonder if es could be sucked into the store\
* rsimnet, rsimserver\
}